// Generated by LiveScript 1.2.0
(function(){
  var EventEmitter, ref$, split, last, EventBroker;
  EventEmitter = require("events").EventEmitter;
  ref$ = require("prelude-ls"), split = ref$.split, last = ref$.last;
  EventBroker = (function(superclass){
    var separator, acceptor, space, prototype = extend$((import$(EventBroker, superclass).displayName = 'EventBroker', EventBroker), superclass).prototype, constructor = EventBroker;
    separator = ":";
    acceptor = "*";
    space = "                                                                                                ";
    prototype.emit = function(event, object){
      return superclass.prototype.emit.call(this, "message", {
        _event: event,
        object: object
      });
    };
    prototype.on = function(event, listener){
      var this$ = this;
      return superclass.prototype.on.call(this, "message", function(object){
        var shouldSendEvent;
        shouldSendEvent = this$.compareMessageNamespaces(event, object._event);
        if (shouldSendEvent) {
          if (event.indexOf(acceptor) !== -1) {
            return listener(object._event, object.object);
          } else {
            return listener(object.object);
          }
        }
      });
    };
    prototype.any = function(listener){
      return this.on(acceptor, listener);
    };
    prototype.compareMessageNamespaces = function(required, given){
      var valid, requiredParts, givenParts, acceptsAnySincePosition, partsToSatisfy, i$, to$, position, unsatisfiedParts;
      required == null && (required = "");
      given == null && (given = "");
      valid = false;
      requiredParts = split(separator, required);
      givenParts = split(separator, given);
      if (requiredParts.length <= givenParts.length || --requiredParts.length === givenParts.length && required.indexOf(acceptor) !== -1) {
        acceptsAnySincePosition = -1;
        partsToSatisfy = requiredParts.length;
        for (i$ = 0, to$ = requiredParts.length; i$ < to$; ++i$) {
          position = i$;
          if (requiredParts[position] === acceptor) {
            acceptsAnySincePosition = position;
            break;
          }
        }
        if (acceptsAnySincePosition !== -1) {
          partsToSatisfy = acceptsAnySincePosition;
        }
        unsatisfiedParts = partsToSatisfy;
        for (i$ = 0; i$ < partsToSatisfy; ++i$) {
          position = i$;
          if (requiredParts[position] === givenParts[position]) {
            --unsatisfiedParts;
          }
        }
        valid = !unsatisfiedParts;
      }
      return valid;
    };
    function EventBroker(){
      this.compareMessageNamespaces = bind$(this, 'compareMessageNamespaces', prototype);
      this.any = bind$(this, 'any', prototype);
      this.on = bind$(this, 'on', prototype);
      this.emit = bind$(this, 'emit', prototype);
      EventBroker.superclass.apply(this, arguments);
    }
    return EventBroker;
  }(EventEmitter));
  module.exports = EventBroker;
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
